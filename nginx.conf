load_module /etc/nginx/modules/ngx_http_brotli_filter_module.so;
load_module /etc/nginx/modules/ngx_http_brotli_static_module.so;

worker_processes auto;
include /etc/nginx/modules-enabled/*.conf;

events {
    worker_connections 1024;
}

http {
    sendfile on;
    tcp_nopush on;
    tcp_nodelay on;
    keepalive_timeout 65;
    types_hash_max_size 2048;

    include mime.types;
    default_type application/octet-stream;

    # Log Settings
    access_log /usr/local/nginx/logs/access.log;
    error_log /usr/local/nginx/logs/error.log;

    # Brotli Settings
    brotli on;
    brotli_comp_level 11;
    brotli_types text/plain text/css application/json application/javascript text/xml application/xml application/xml+rss text/javascript image/svg+xml font/eot font/ttf font/woff font/woff2 image/png image/jpeg image/gif image/webp;

    # Serve the application
    server {
        listen 80;
        server_name localhost;

        # Set the root directory
        root /usr/share/nginx/html;
        index index.html index.html.br;

        # Serve the application (including client-side routing)
        location / {
            try_files $uri $uri/ /index.html.br =404;

            # Ensure proper headers for brotli compressed index.html
            brotli off;  # Disable brotli for pre-compressed .br files
            add_header Content-Encoding br;
            add_header Content-Type text/html;
            add_header Vary Accept-Encoding;
        }

        location ~* \.html\.br$ {
            add_header Content-Type text/html;
            add_header Content-Encoding br;
            add_header Vary Accept-Encoding;
            try_files $uri =404;
        }

       # Serve JavaScript files with brotli if available
        location ~* \.js$ {
            try_files $uri.br $uri =404;
            add_header Content-Type application/javascript;
            add_header Content-Encoding br always;
            add_header Vary Accept-Encoding;
            expires 1y;
            add_header Cache-Control "public, max-age=31536000, immutable";
        }

        # Serve CSS files with brotli if available
        location ~* \.css$ {
            try_files $uri.br $uri =404;
            add_header Content-Type text/css;
            add_header Content-Encoding br always;
            add_header Vary Accept-Encoding;
            expires 1y;
            add_header Cache-Control "public, max-age=31536000, immutable";
        }

        # Serve HTML files with brotli if available
        location ~* \.html$ {
            try_files $uri.br $uri =404;
            add_header Content-Type text/html;
            add_header Content-Encoding br always;
            add_header Vary Accept-Encoding;
            expires 1h;
            add_header Cache-Control "public, must-revalidate, max-age=3600";
        }

        # Serve JSON files with correct headers
        location ~* \.json$ {
            try_files $uri.br $uri =404;
            add_header Content-Type application/json;
            add_header Vary Accept-Encoding;
            add_header Cache-Control "public, max-age=3600, must-revalidate";
            brotli off;  # Do not recompress, serve as it is
        }

        # Serve SVG files with brotli if available
        location ~* \.svg$ {
            try_files $uri.br $uri =404;
            add_header Content-Type image/svg+xml;
            add_header Content-Encoding br always;
            add_header Vary Accept-Encoding;
            expires 1y;
            add_header Cache-Control "public, max-age=31536000, immutable";
        }

        # Serve EOT files with brotli if available
        location ~* \.eot$ {
            try_files $uri.br $uri =404;
            add_header Content-Type application/vnd.ms-fontobject;
            add_header Content-Encoding br always;
            add_header Vary Accept-Encoding;
            expires 1y;
            add_header Cache-Control "public, max-age=31536000, immutable";
        }

        # Serve TTF files with brotli if available
        location ~* \.ttf$ {
            try_files $uri.br $uri =404;
            add_header Content-Type font/ttf;
            add_header Content-Encoding br always;
            add_header Vary Accept-Encoding;
            expires 1y;
            add_header Cache-Control "public, max-age=31536000, immutable";
        }

        # Serve WOFF files with brotli if available
        location ~* \.woff$ {
            try_files $uri.br $uri =404;
            add_header Content-Type font/woff;
            add_header Content-Encoding br always;
            add_header Vary Accept-Encoding;
            expires 1y;
            add_header Cache-Control "public, max-age=31536000, immutable";
        }

        # Serve WOFF2 files with brotli if available
        location ~* \.woff2$ {
            try_files $uri.br $uri =404;
            add_header Content-Type font/woff2;
            add_header Content-Encoding br always;
            add_header Vary Accept-Encoding;
            expires 1y;
            add_header Cache-Control "public, max-age=31536000, immutable";
        }

        # Serve ICO files with brotli if available
        location ~* \.ico$ {
            try_files $uri.br $uri =404;
            add_header Content-Type image/x-icon;
            add_header Content-Encoding br always;
            add_header Vary Accept-Encoding;
            expires 1y;
            add_header Cache-Control "public, max-age=31536000, immutable";
        }

        # Serve PNG files with brotli if available
        location ~* \.png$ {
            try_files $uri.br $uri =404;
            add_header Content-Type image/png;
            add_header Content-Encoding br always;
            add_header Vary Accept-Encoding;
            expires 1y;
            add_header Cache-Control "public, max-age=31536000, immutable";
        }

        # Serve JPEG files with brotli if available
        location ~* \.jpeg$ {
            try_files $uri.br $uri =404;
            add_header Content-Type image/jpeg;
            add_header Content-Encoding br always;
            add_header Vary Accept-Encoding;
            expires 1y;
            add_header Cache-Control "public, max-age=31536000, immutable";
        }

        # Serve JPG files with brotli if available
        location ~* \.jpg$ {
            try_files $uri.br $uri =404;
            add_header Content-Type image/jpeg;
            add_header Content-Encoding br always;
            add_header Vary Accept-Encoding;
            expires 1y;
            add_header Cache-Control "public, max-age=31536000, immutable";
        }

        # Serve GIF files with brotli if available
        location ~* \.gif$ {
            try_files $uri.br $uri =404;
            add_header Content-Type image/gif;
            add_header Content-Encoding br always;
            add_header Vary Accept-Encoding;
            expires 1y;
            add_header Cache-Control "public, max-age=31536000, immutable";
        }

        # Serve WEBP files with brotli if available
        location ~* \.webp$ {
            try_files $uri.br $uri =404;
            add_header Content-Type image/webp;
            add_header Content-Encoding br always;
            add_header Vary Accept-Encoding;
            expires 1y;
            add_header Cache-Control "public, max-age=31536000, immutable";
        }

        # Handle already brotli compressed files
        location ~* \.br$ {
            brotli off;  # Ensure Nginx doesn't recompress .br files
            add_header Content-Encoding br;
            add_header Vary Accept-Encoding;
            default_type application/octet-stream;
            add_header Cache-Control "public, max-age=31536000, immutable";
            try_files $uri =404;
        }

        # CORS configuration for API and assets compatibility across platforms
        location /api/ {
            add_header 'Access-Control-Allow-Origin' '*';
            add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS';
            add_header 'Access-Control-Allow-Headers' 'DNT,X-CustomHeader,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type';
            if ($request_method = 'OPTIONS') {
                return 204;
            }
        }

        # Special handling for ngsw.json to ensure correct MIME type
        location = /ngsw.json {
            try_files /ngsw.json.br $uri =404;  # Serve brotli version if available
            add_header Content-Type application/json;
            add_header Content-Encoding br always;
            add_header Vary Accept-Encoding;
            add_header Cache-Control "no-cache, no-store, must-revalidate";
            brotli off;  # Do not recompress, serve as it is
        }
    }
}

# user nginx;
# worker_processes auto;
# pid /var/run/nginx.pid;
# include /etc/nginx/modules-enabled/*.conf;

# events {
#     worker_connections 1024;
# }

# http {
#     sendfile on;
#     tcp_nopush on;
#     tcp_nodelay on;
#     keepalive_timeout 65;
#     types_hash_max_size 2048;

#     include /etc/nginx/mime.types;
#     default_type application/octet-stream;

#     # Log Settings
#     access_log /var/log/nginx/access.log;
#     error_log /var/log/nginx/error.log;

#     # Gzip Settings
#     gzip on;
#     gzip_disable "msie6";
#     gzip_vary on;
#     gzip_proxied any;
#     gzip_comp_level 6;
#     gzip_buffers 16 8k;
#     gzip_http_version 1.1;
#     gzip_min_length 256;
#     gzip_types text/plain text/css application/json application/javascript text/xml application/xml application/xml+rss text/javascript image/svg+xml font/eot font/ttf font/woff font/woff2 image/png image/jpeg image/gif image/webp;

#     # Serve the application
#     server {
#         listen 80;
#         server_name localhost;

#         # Set the root directory
#         root /usr/share/nginx/html;
#         index index.html index.html.gz;

#         # Serve the application (including client-side routing)
#         location / {
#             try_files $uri $uri/ /index.html.gz =404;

#             # Ensure proper headers for gzipped index.html
#             gzip off;  # Disable gzip for pre-compressed .gz files
#             add_header Content-Encoding gzip;
#             add_header Content-Type text/html;
#             add_header Vary Accept-Encoding;
#         }

#         # Serve JavaScript files with gzip if available
#         location ~* \.js$ {
#             try_files $uri.gz $uri =404;
#             add_header Content-Type application/javascript;
#             add_header Content-Encoding gzip always;
#             add_header Vary Accept-Encoding;
#             expires 1y;
#             add_header Cache-Control "public, max-age=31536000, immutable";
#         }

#         # Serve CSS files with gzip if available
#         location ~* \.css$ {
#             try_files $uri.gz $uri =404;
#             add_header Content-Type text/css;
#             add_header Content-Encoding gzip always;
#             add_header Vary Accept-Encoding;
#             expires 1y;
#             add_header Cache-Control "public, max-age=31536000, immutable";
#         }

#         # Serve HTML files with gzip if available
#         location ~* \.html$ {
#             try_files $uri.gz $uri =404;
#             add_header Content-Type text/html;
#             add_header Content-Encoding gzip always;
#             add_header Vary Accept-Encoding;
#             expires 1h;
#             add_header Cache-Control "public, must-revalidate, max-age=3600";
#         }

#         # Serve JSON files with correct headers
#         location ~* \.json$ {
#             try_files $uri.gz $uri =404;
#             add_header Content-Type application/json;
#             add_header Vary Accept-Encoding;
#             add_header Cache-Control "public, max-age=3600, must-revalidate";
#             gzip off;  # Do not recompress, serve as it is
#         }

#         # Serve SVG files with gzip if available
#         location ~* \.svg$ {
#             try_files $uri.gz $uri =404;
#             add_header Content-Type image/svg+xml;
#             add_header Content-Encoding gzip always;
#             add_header Vary Accept-Encoding;
#             expires 1y;
#             add_header Cache-Control "public, max-age=31536000, immutable";
#         }

#         # Serve EOT files with gzip if available
#         location ~* \.eot$ {
#             try_files $uri.gz $uri =404;
#             add_header Content-Type application/vnd.ms-fontobject;
#             add_header Content-Encoding gzip always;
#             add_header Vary Accept-Encoding;
#             expires 1y;
#             add_header Cache-Control "public, max-age=31536000, immutable";
#         }

#         # Serve TTF files with gzip if available
#         location ~* \.ttf$ {
#             try_files $uri.gz $uri =404;
#             add_header Content-Type font/ttf;
#             add_header Content-Encoding gzip always;
#             add_header Vary Accept-Encoding;
#             expires 1y;
#             add_header Cache-Control "public, max-age=31536000, immutable";
#         }

#         # Serve WOFF files with gzip if available
#         location ~* \.woff$ {
#             try_files $uri.gz $uri =404;
#             add_header Content-Type font/woff;
#             add_header Content-Encoding gzip always;
#             add_header Vary Accept-Encoding;
#             expires 1y;
#             add_header Cache-Control "public, max-age=31536000, immutable";
#         }

#         # Serve WOFF2 files with gzip if available
#         location ~* \.woff2$ {
#             try_files $uri.gz $uri =404;
#             add_header Content-Type font/woff2;
#             add_header Content-Encoding gzip always;
#             add_header Vary Accept-Encoding;
#             expires 1y;
#             add_header Cache-Control "public, max-age=31536000, immutable";
#         }

#         # Serve ICO files with gzip if available
#         location ~* \.ico$ {
#             try_files $uri.gz $uri =404;
#             add_header Content-Type image/x-icon;
#             add_header Content-Encoding gzip always;
#             add_header Vary Accept-Encoding;
#             expires 1y;
#             add_header Cache-Control "public, max-age=31536000, immutable";
#         }

#         # Serve PNG files with gzip if available
#         location ~* \.png$ {
#             try_files $uri.gz $uri =404;
#             add_header Content-Type image/png;
#             add_header Content-Encoding gzip always;
#             add_header Vary Accept-Encoding;
#             expires 1y;
#             add_header Cache-Control "public, max-age=31536000, immutable";
#         }

#         # Serve JPEG files with gzip if available
#         location ~* \.jpeg$ {
#             try_files $uri.gz $uri =404;
#             add_header Content-Type image/jpeg;
#             add_header Content-Encoding gzip always;
#             add_header Vary Accept-Encoding;
#             expires 1y;
#             add_header Cache-Control "public, max-age=31536000, immutable";
#         }

#         # Serve JPG files with gzip if available
#         location ~* \.jpg$ {
#             try_files $uri.gz $uri =404;
#             add_header Content-Type image/jpeg;
#             add_header Content-Encoding gzip always;
#             add_header Vary Accept-Encoding;
#             expires 1y;
#             add_header Cache-Control "public, max-age=31536000, immutable";
#         }

#         # Serve GIF files with gzip if available
#         location ~* \.gif$ {
#             try_files $uri.gz $uri =404;
#             add_header Content-Type image/gif;
#             add_header Content-Encoding gzip always;
#             add_header Vary Accept-Encoding;
#             expires 1y;
#             add_header Cache-Control "public, max-age=31536000, immutable";
#         }

#         # Serve WEBP files with gzip if available
#         location ~* \.webp$ {
#             try_files $uri.gz $uri =404;
#             add_header Content-Type image/webp;
#             add_header Content-Encoding gzip always;
#             add_header Vary Accept-Encoding;
#             expires 1y;
#             add_header Cache-Control "public, max-age=31536000, immutable";
#         }

#         # Handle already gzipped files
#         location ~* \.gz$ {
#             gzip off;  # Ensure Nginx doesn't recompress .gz files
#             add_header Content-Encoding gzip;
#             add_header Vary Accept-Encoding;
#             default_type application/octet-stream;
#             add_header Cache-Control "public, max-age=31536000, immutable";
#             try_files $uri =404;
#         }

#         # CORS configuration for API and assets compatibility across platforms
#         location /api/ {
#             add_header 'Access-Control-Allow-Origin' '*';
#             add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS';
#             add_header 'Access-Control-Allow-Headers' 'DNT,X-CustomHeader,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type';
#             if ($request_method = 'OPTIONS') {
#                 return 204;
#             }
#         }

#         # Special handling for ngsw.json to ensure correct MIME type
#         location = /ngsw.json {
#             try_files /ngsw.json.gz $uri =404;  # Serve gzipped version if available
#             add_header Content-Type application/json;
#             add_header Content-Encoding gzip always;
#             add_header Vary Accept-Encoding;
#             add_header Cache-Control "no-cache, no-store, must-revalidate";
#             gzip off;  # Do not recompress, serve as it is
#         }
#     }
# }
