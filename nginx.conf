load_module /etc/nginx/modules/ngx_http_brotli_filter_module.so;
load_module /etc/nginx/modules/ngx_http_brotli_static_module.so;

worker_processes auto;

events {
    worker_connections 1024;
}

http {
    sendfile on;
    tcp_nopush on;
    tcp_nodelay on;
    keepalive_timeout 65;
    types_hash_max_size 2048;

    include mime.types;
    default_type application/octet-stream;

    # Log Settings
    access_log /usr/local/nginx/logs/access.log;
    error_log /usr/local/nginx/logs/error.log;

    # Brotli Settings
    brotli on;
    brotli_comp_level 11;
    brotli_types text/plain text/css application/json application/javascript text/xml application/xml application/xml+rss text/javascript image/svg+xml font/eot font/ttf font/woff font/woff2 image/png image/jpeg image/gif image/webp;

    server {
        listen 80;
        server_name localhost;

        # Set the root directory for static assets
        root /usr/share/nginx/html;
        index index.html index.html.br;

        # Serve pre-rendered and SSR content
        location / {
            try_files $uri $uri/ @ssr;

            # Serve precompressed .br files directly if available
            brotli off;  # Disable recompression for precompressed files
        }

        # Proxy dynamic SSR requests to Node.js
        location @ssr {
            proxy_pass http://127.0.0.1:4000;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection 'upgrade';
            proxy_set_header Host $host;
            proxy_cache_bypass $http_upgrade;
        }

        # Serve JavaScript files with brotli if available
        location ~* \.js$ {
            try_files $uri.br $uri =404;
            add_header Content-Type application/javascript;
            add_header Content-Encoding br always;
            add_header Vary Accept-Encoding;
            expires 1y;
            add_header Cache-Control "public, max-age=31536000, immutable";
        }

        # Serve CSS files with brotli if available
        location ~* \.css$ {
            try_files $uri.br $uri =404;
            add_header Content-Type text/css;
            add_header Content-Encoding br always;
            add_header Vary Accept-Encoding;
            expires 1y;
            add_header Cache-Control "public, max-age=31536000, immutable";
        }

        # Serve HTML files with brotli if available
        location ~* \.html$ {
            try_files $uri.br $uri =404;
            add_header Content-Type text/html;
            add_header Content-Encoding br always;
            add_header Vary Accept-Encoding;
            expires 1h;
            add_header Cache-Control "public, must-revalidate, max-age=3600";
        }

        # Serve image files with brotli if available
        location ~* \.(png|jpe?g|gif|webp|ico|svg)$ {
            try_files $uri.br $uri =404;
            add_header Vary Accept-Encoding;
            expires 1y;
            add_header Cache-Control "public, max-age=31536000, immutable";

            # Set the correct Content-Type for images
            if ($request_filename ~* \.png$) {
                add_header Content-Type image/png;
            }
            if ($request_filename ~* \.jpe?g$) {
                add_header Content-Type image/jpeg;
            }
            if ($request_filename ~* \.gif$) {
                add_header Content-Type image/gif;
            }
            if ($request_filename ~* \.webp$) {
                add_header Content-Type image/webp;
            }
            if ($request_filename ~* \.ico$) {
                add_header Content-Type image/x-icon;
            }
            if ($request_filename ~* \.svg$) {
                add_header Content-Type image/svg+xml;
            }
        }

        # Serve font files with brotli if available
        location ~* \.(eot|ttf|woff|woff2)$ {
            try_files $uri.br $uri =404;
            add_header Vary Accept-Encoding;
            expires 1y;
            add_header Cache-Control "public, max-age=31536000, immutable";

            # Set the correct Content-Type for fonts
            if ($request_filename ~* \.eot$) {
                add_header Content-Type application/vnd.ms-fontobject;
            }
            if ($request_filename ~* \.ttf$) {
                add_header Content-Type font/ttf;
            }
            if ($request_filename ~* \.woff$) {
                add_header Content-Type font/woff;
            }
            if ($request_filename ~* \.woff2$) {
                add_header Content-Type font/woff2;
            }
        }

        # Serve JSON files
        location ~* \.json$ {
            try_files $uri.br $uri =404;
            add_header Content-Type application/json;
            add_header Vary Accept-Encoding;
            add_header Cache-Control "public, max-age=3600, must-revalidate";
            brotli off;  # Do not recompress, serve as it is
        }

        # Serve already brotli compressed files
        location ~* \.br$ {
            brotli off;  # Ensure Nginx doesn't recompress .br files
            add_header Content-Encoding br;
            add_header Vary Accept-Encoding;
            default_type application/octet-stream;
            add_header Cache-Control "public, max-age=31536000, immutable";
            try_files $uri =404;
        }

        # Handle CORS configuration for API and assets compatibility
        location /api/ {
            add_header 'Access-Control-Allow-Origin' '*';
            add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS';
            add_header 'Access-Control-Allow-Headers' 'DNT,X-CustomHeader,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type';
            if ($request_method = 'OPTIONS') {
                return 204;
            }
        }

        # Special handling for ngsw.json to ensure correct MIME type
        location = /ngsw.json {
            try_files $uri.br $uri =404;  # Serve brotli version if available
            add_header Content-Type application/json;
            add_header Content-Encoding br always;
            add_header Vary Accept-Encoding;
            add_header Cache-Control "no-cache, no-store, must-revalidate";
            brotli off;  # Do not recompress, serve as it is
        }
    }
}
